import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, CallbackContext, MessageHandler, Filters,
    ConversationHandler, CallbackQueryHandler
)


def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return ConversationHandler.END


TOKEN = '7571543010:AAGGdsowEAJOE4sVCWMNKFslo4vNSoU3SjY'
GOOGLE_SHEET_ID = '1y8vXc06xSGcOdaYYxIKQIaNkVBMJe8-qPBXyNyUujr8'

def get_supplier(update: Update, context: CallbackContext) -> int:
    value = update.message.text
    context.user_data['Zabor'] = value
    route = ROUTES.get(value.strip(), [])
    context.user_data['route'] = route
    context.user_data['step_index'] = 0
    return next_step(update, context)

def get_top_by_column(col_letter: str, limit: int = 10) -> list:
    try:
        ws = sheet.worksheet('–û–ø–µ—Ä–∞—Ü–∏–∏')
        col_index = ord(col_letter.upper()) - ord('A') + 1
        values = ws.col_values(col_index)[3:]
        values = [v.strip() for v in values if v.strip()]
        counter = Counter(values)
        return [item for item, _ in counter.most_common(limit)]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_top_by_column({col_letter}): {e}")
        return []

def next_step(update: Update, context: CallbackContext) -> int:
    route = context.user_data.get('route', [])
    index = context.user_data.get('step_index', 0)

    if index >= len(route):
        update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    current_col = route[index]
    context.user_data['step_index'] = index + 1

    if current_col == 'J':
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        return FIO

    elif current_col == 'K':
        top = get_top_by_column('K')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üì± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=InlineKeyboardMarkup(keyboard))
        return PHONE_INLINE

    elif current_col == 'L':
        top = get_top_by_column('L')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
        return CITY_INLINE

    elif current_col == 'S':
        top = get_top_by_column('S')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        return COST_INLINE

    elif current_col == 'T':
        top = get_top_by_column('T')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üöö –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        return DELIVERY_INLINE

    elif current_col == 'U':
        top = get_top_by_column('U')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üî¢ –í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return ORDER_INLINE

    elif current_col == 'V':
        top = get_top_by_column('V')
        keyboard = [[InlineKeyboardButton(text, callback_data=text)] for text in top]
        keyboard.append([InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
        update.message.reply_text("üîê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SERIAL_INLINE

    update.message.reply_text(f"üõ†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {current_col}")
    return ConversationHandler.END



def get_fio(update: Update, context: CallbackContext) -> int:
    context.user_data['FIO'] = update.message.text
    return next_step(update, context)

def handle_inline(update: Update, context: CallbackContext, key: str, next_state: int) -> int:
    query = update.callback_query
    value = query.data
    query.answer()

    if value == 'manual':
        context.bot.send_message(chat_id=query.message.chat_id, text="‚úè –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
        return next_state
    else:
        context.user_data[key] = value
        return next_step(update, context)

def get_phone(update: Update, context: CallbackContext) -> int:
    context.user_data['Telefon'] = update.message.text
    return next_step(update, context)

def get_city(update: Update, context: CallbackContext) -> int:
    context.user_data['Gorod'] = update.message.text
    return next_step(update, context)

def get_track(update: Update, context: CallbackContext) -> int:
    context.user_data['TrekNomer'] = update.message.text
    return next_step(update, context)

def get_cost(update: Update, context: CallbackContext) -> int:
    context.user_data['Price'] = update.message.text
    return next_step(update, context)

def get_delivery(update: Update, context: CallbackContext) -> int:
    context.user_data['Dostavka'] = update.message.text
    return next_step(update, context)

def get_order(update: Update, context: CallbackContext) -> int:
    context.user_data['NomerZakaza'] = update.message.text
    return next_step(update, context)

def get_serial(update: Update, context: CallbackContext) -> int:
    context.user_data['SerNom'] = update.message.text
    return next_step(update, context)

def get_comment(update: Update, context: CallbackContext) -> int:
    context.user_data['Komment'] = update.message.text
    update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    save_to_sheet(context)
    return ConversationHandler.END

# CallbackQueryHandlers –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
def phone_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'Telefon', PHONE)

def city_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'Gorod', CITY)

def cost_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'Price', COST)

def delivery_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'Dostavka', DELIVERY)

def order_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'NomerZakaza', ORDER)

def serial_inline(update: Update, context: CallbackContext) -> int:
    return handle_inline(update, context, 'SerNom', SERIAL)



def save_to_sheet(context: CallbackContext) -> None:
    data = context.user_data
    ws = sheet.worksheet('–û–ø–µ—Ä–∞—Ü–∏–∏')
    row = data.get('row', 4)

    def val(k): return [[data.get(k, '')]]

    ws.update(f'B{row}', val('DD MM GGGG'))      # –î–∞—Ç–∞
    ws.update(f'C{row}', val('Magazin'))         # –ú–∞–≥–∞–∑–∏–Ω
    ws.update(f'D{row}', val('Oper'))            # –û–ø–µ—Ä–∞—Ü–∏—è
    ws.update(f'G{row}', val('Tovar'))           # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    ws.update(f'H{row}', val('Kol'))             # –ö–æ–ª-–≤–æ
    ws.update(f'I{row}', val('Zabor'))           # –ü–æ—Å—Ç–∞–≤—â–∏–∫
    ws.update(f'J{row}', val('FIO'))             # –§–ò–û
    ws.update(f'K{row}', val('Telefon'))         # –¢–µ–ª–µ—Ñ–æ–Ω
    ws.update(f'L{row}', val('Gorod'))           # –ì–æ—Ä–æ–¥
    ws.update(f'O{row}', val('TrekNomer'))       # –¢—Ä–µ–∫
    ws.update(f'S{row}', val('Price'))           # –°—Ç–æ–∏–º–æ—Å—Ç—å
    ws.update(f'T{row}', val('Dostavka'))        # –î–æ—Å—Ç–∞–≤–∫–∞
    ws.update(f'U{row}', val('NomerZakaza'))     # ‚Ññ –∑–∞–∫–∞–∑–∞
    ws.update(f'V{row}', val('SerNom'))          # –°–µ—Ä–∏–π–Ω–∏–∫
    ws.update(f'W{row}', val('NUMBERTEXT'))      # –ß–∏—Å–ª–æ –ø—Ä–æ–ø–∏—Å—å—é
    ws.update(f'X{row}', val('Summa'))           # –ò—Ç–æ–≥–æ
    ws.update(f'Y{row}', val('Komment'))         # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π


def main():
    print("‚è≥ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    try:
        updater = Updater(TOKEN)
        dp = updater.dispatcher
        dp.add_handler(CommandHandler("start", start))
        updater.start_polling()
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∫–æ–º–∞–Ω–¥.")
        updater.idle()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == '__main__':
    main()
